package net.regions_unexplored.data.worldgen.features;

import com.google.common.collect.ImmutableList;
import net.minecraft.core.Direction;
import net.minecraft.core.HolderGetter;
import net.minecraft.core.HolderSet;
import net.minecraft.core.registries.Registries;
import net.minecraft.data.worldgen.BootstapContext;
import net.minecraft.resources.ResourceKey;
import net.minecraft.tags.BlockTags;
import net.minecraft.util.random.SimpleWeightedRandomList;
import net.minecraft.util.valueproviders.ConstantInt;
import net.minecraft.util.valueproviders.UniformInt;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.HugeMushroomBlock;
import net.minecraft.world.level.block.MangrovePropaguleBlock;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.levelgen.feature.ConfiguredFeature;
import net.minecraft.world.level.levelgen.feature.Feature;
import net.minecraft.world.level.levelgen.feature.HugeFungusConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration;
import net.minecraft.world.level.levelgen.feature.featuresize.ThreeLayersFeatureSize;
import net.minecraft.world.level.levelgen.feature.featuresize.TwoLayersFeatureSize;
import net.minecraft.world.level.levelgen.feature.foliageplacers.*;
import net.minecraft.world.level.levelgen.feature.rootplacers.AboveRootPlacement;
import net.minecraft.world.level.levelgen.feature.rootplacers.MangroveRootPlacement;
import net.minecraft.world.level.levelgen.feature.rootplacers.MangroveRootPlacer;
import net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider;
import net.minecraft.world.level.levelgen.feature.stateproviders.RandomizedIntStateProvider;
import net.minecraft.world.level.levelgen.feature.stateproviders.WeightedStateProvider;
import net.minecraft.world.level.levelgen.feature.treedecorators.AttachedToLeavesDecorator;
import net.minecraft.world.level.levelgen.feature.treedecorators.BeehiveDecorator;
import net.minecraft.world.level.levelgen.feature.treedecorators.LeaveVineDecorator;
import net.minecraft.world.level.levelgen.feature.trunkplacers.*;
import net.regions_unexplored.block.RegionsUnexploredBlocks;
import net.regions_unexplored.world.features.treedecorators.BambooLeaveDecorator;
import net.regions_unexplored.util.worldgen.RuFeatureUtils;
import net.regions_unexplored.world.features.treedecorators.*;
import net.regions_unexplored.world.level.block.AppleLeavesBlock;
import net.regions_unexplored.world.level.block.AshBlock;
import net.regions_unexplored.world.level.block.BambooLogBlock;

import java.util.List;
import java.util.Optional;
import java.util.OptionalInt;


public class RuTreeFeatures {
    public static final ResourceKey<ConfiguredFeature<?, ?>> ALPHA_OAK_TREE = RuFeatureUtils.createKey("alpha_oak_tree");

    public static final ResourceKey<ConfiguredFeature<?, ?>> BAMBOO_TREE = RuFeatureUtils.createKey("bamboo_tree");

    public static final ResourceKey<ConfiguredFeature<?, ?>> FLOWERING_OAK_TREE = RuFeatureUtils.createKey("flowering_oak_tree");
    public static final ResourceKey<ConfiguredFeature<?, ?>> BIG_FLOWERING_OAK_TREE = RuFeatureUtils.createKey("big_flowering_oak_tree");

    public static final ResourceKey<ConfiguredFeature<?, ?>> APPLE_OAK_TREE = RuFeatureUtils.createKey("apple_oak_tree");
    public static final ResourceKey<ConfiguredFeature<?, ?>> BIG_APPLE_OAK_TREE = RuFeatureUtils.createKey("big_apple_oak_tree");

    public static final ResourceKey<ConfiguredFeature<?, ?>> BAOBAB_TREE = RuFeatureUtils.createKey("baobab_tree");
    public static final ResourceKey<ConfiguredFeature<?, ?>> BIG_BAOBAB_TREE = RuFeatureUtils.createKey("big_baobab_tree");

    public static final ResourceKey<ConfiguredFeature<?, ?>> BLACKWOOD_TREE = RuFeatureUtils.createKey("blackwood_tree");
    public static final ResourceKey<ConfiguredFeature<?, ?>> BIG_BLACKWOOD_TREE = RuFeatureUtils.createKey("big_blackwood_tree");
    public static final ResourceKey<ConfiguredFeature<?, ?>> GIANT_BLACKWOOD_TREE = RuFeatureUtils.createKey("giant_blackwood_tree");

    public static final ResourceKey<ConfiguredFeature<?, ?>> CHERRY_TREE = RuFeatureUtils.createKey("cherry_tree");
    public static final ResourceKey<ConfiguredFeature<?, ?>> BIG_CHERRY_TREE = RuFeatureUtils.createKey("big_cherry_tree");
    public static final ResourceKey<ConfiguredFeature<?, ?>> RED_CHERRY_TREE = RuFeatureUtils.createKey("red_cherry_tree");
    public static final ResourceKey<ConfiguredFeature<?, ?>> RED_BIG_CHERRY_TREE = RuFeatureUtils.createKey("red_big_cherry_tree");
    public static final ResourceKey<ConfiguredFeature<?, ?>> PINK_CHERRY_TREE = RuFeatureUtils.createKey("pink_cherry_tree");
    public static final ResourceKey<ConfiguredFeature<?, ?>> PINK_BIG_CHERRY_TREE = RuFeatureUtils.createKey("pink_big_cherry_tree");
    public static final ResourceKey<ConfiguredFeature<?, ?>> WHITE_CHERRY_TREE = RuFeatureUtils.createKey("white_cherry_tree");
    public static final ResourceKey<ConfiguredFeature<?, ?>> WHITE_BIG_CHERRY_TREE = RuFeatureUtils.createKey("white_big_cherry_tree");

    public static final ResourceKey<ConfiguredFeature<?, ?>> CYPRESS_TREE = RuFeatureUtils.createKey("cypress_tree");
    public static final ResourceKey<ConfiguredFeature<?, ?>> BIG_CYPRESS_TREE = RuFeatureUtils.createKey("big_cypress_tree");
    public static final ResourceKey<ConfiguredFeature<?, ?>> CYPRESS_TREE_MOSS = RuFeatureUtils.createKey("cypress_tree_moss");
    public static final ResourceKey<ConfiguredFeature<?, ?>> BIG_CYPRESS_TREE_MOSS = RuFeatureUtils.createKey("big_cypress_tree_moss");

    public static final ResourceKey<ConfiguredFeature<?, ?>> DEAD_TREE = RuFeatureUtils.createKey("dead_tree");
    public static final ResourceKey<ConfiguredFeature<?, ?>> BIG_DEAD_TREE = RuFeatureUtils.createKey("big_dead_tree");

    public static final ResourceKey<ConfiguredFeature<?, ?>> DEAD_PINE_TREE = RuFeatureUtils.createKey("dead_pine_tree");
    public static final ResourceKey<ConfiguredFeature<?, ?>> DEAD_PINE_TREE_TALL = RuFeatureUtils.createKey("dead_pine_tree_tall");
    public static final ResourceKey<ConfiguredFeature<?, ?>> DEAD_SCOTTS_PINE_TREE = RuFeatureUtils.createKey("dead_scotts_pine_tree");
    public static final ResourceKey<ConfiguredFeature<?, ?>> DEAD_SCOTTS_PINE_TREE_TALL = RuFeatureUtils.createKey("dead_scotts_pine_tree_tall");
    public static final ResourceKey<ConfiguredFeature<?, ?>> DEAD_GIANT_PINE_TREE = RuFeatureUtils.createKey("dead_giant_pine_tree");

    public static final ResourceKey<ConfiguredFeature<?, ?>> EUCALYPTUS_TREE = RuFeatureUtils.createKey("eucalyptus_tree");

    public static final ResourceKey<ConfiguredFeature<?, ?>> LARGE_JOSHUA_TREE = RuFeatureUtils.createKey("large_joshua_tree");
    public static final ResourceKey<ConfiguredFeature<?, ?>> MEDIUM_JOSHUA_TREE = RuFeatureUtils.createKey("medium_joshua_tree");

    public static final ResourceKey<ConfiguredFeature<?, ?>> LARCH_TREE = RuFeatureUtils.createKey("larch_tree");
    public static final ResourceKey<ConfiguredFeature<?, ?>> BIG_LARCH_TREE = RuFeatureUtils.createKey("big_larch_tree");
    public static final ResourceKey<ConfiguredFeature<?, ?>> GIANT_LARCH_TREE = RuFeatureUtils.createKey("giant_larch_tree");

    public static final ResourceKey<ConfiguredFeature<?, ?>> GOLDEN_LARCH_TREE = RuFeatureUtils.createKey("larch_golden_tree");
    public static final ResourceKey<ConfiguredFeature<?, ?>> BIG_GOLDEN_LARCH_TREE = RuFeatureUtils.createKey("big_golden_larch_tree");
    public static final ResourceKey<ConfiguredFeature<?, ?>> GIANT_GOLDEN_LARCH_TREE = RuFeatureUtils.createKey("giant_golden_larch_tree");

    public static final ResourceKey<ConfiguredFeature<?, ?>> MAPLE_TREE = RuFeatureUtils.createKey("maple_tree");
    public static final ResourceKey<ConfiguredFeature<?, ?>> BIG_MAPLE_TREE = RuFeatureUtils.createKey("big_maple_tree");
    public static final ResourceKey<ConfiguredFeature<?, ?>> RED_MAPLE_TREE = RuFeatureUtils.createKey("red_maple_tree");
    public static final ResourceKey<ConfiguredFeature<?, ?>> BIG_RED_MAPLE_TREE = RuFeatureUtils.createKey("big_red_maple_tree");
    public static final ResourceKey<ConfiguredFeature<?, ?>> ORANGE_MAPLE_TREE = RuFeatureUtils.createKey("orange_maple_tree");
    public static final ResourceKey<ConfiguredFeature<?, ?>> BIG_ORANGE_MAPLE_TREE = RuFeatureUtils.createKey("big_orange_maple_tree");

    public static final ResourceKey<ConfiguredFeature<?, ?>> MAUVE_OAK_BEE = RuFeatureUtils.createKey("mauve_oak_bee");
    public static final ResourceKey<ConfiguredFeature<?, ?>> MAUVE_OAK = RuFeatureUtils.createKey("mauve_oak");
    public static final ResourceKey<ConfiguredFeature<?, ?>> BIG_MAUVE_OAK = RuFeatureUtils.createKey("big_mauve_oak");

    public static final ResourceKey<ConfiguredFeature<?, ?>> PALM_TREE = RuFeatureUtils.createKey("palm_tree");

    public static final ResourceKey<ConfiguredFeature<?, ?>> SMALL_PINE = RuFeatureUtils.createKey("small_pine");
    public static final ResourceKey<ConfiguredFeature<?, ?>> SMALL_SCOTTS_PINE = RuFeatureUtils.createKey("small_scotts_pine");
    public static final ResourceKey<ConfiguredFeature<?, ?>> PINE_TREE = RuFeatureUtils.createKey("pine_tree");
    public static final ResourceKey<ConfiguredFeature<?, ?>> PINE_TREE_TALL = RuFeatureUtils.createKey("pine_tree_tall");
    public static final ResourceKey<ConfiguredFeature<?, ?>> SCOTTS_PINE_TREE = RuFeatureUtils.createKey("scotts_pine_tree");
    public static final ResourceKey<ConfiguredFeature<?, ?>> SCOTTS_PINE_TREE_TALL = RuFeatureUtils.createKey("scotts_pine_tree_tall");
    public static final ResourceKey<ConfiguredFeature<?, ?>> GIANT_PINE_TREE = RuFeatureUtils.createKey("giant_pine_tree");

    public static final ResourceKey<ConfiguredFeature<?, ?>> SAGUARO_CACTUS = RuFeatureUtils.createKey("saguaro_cactus");

    public static final ResourceKey<ConfiguredFeature<?, ?>> SILVER_BIRCH_ASPEN = RuFeatureUtils.createKey("silver_birch_aspen");
    public static final ResourceKey<ConfiguredFeature<?, ?>> SILVER_BIRCH = RuFeatureUtils.createKey("silver_birch");

    public static final ResourceKey<ConfiguredFeature<?, ?>> REDWOOD_TREE = RuFeatureUtils.createKey("redwood_tree");
    public static final ResourceKey<ConfiguredFeature<?, ?>> GIANT_REDWOOD_TREE = RuFeatureUtils.createKey("giant_redwood");

    public static final ResourceKey<ConfiguredFeature<?, ?>> WILLOW_TREE = RuFeatureUtils.createKey("willow_tree");

    //BIOME_TREES

    public static final ResourceKey<ConfiguredFeature<?, ?>> APPLE_OAK_TREE_PLAINS = RuFeatureUtils.createKey("apple_oak_tree_plains");
    public static final ResourceKey<ConfiguredFeature<?, ?>> BIG_APPLE_OAK_TREE_PLAINS = RuFeatureUtils.createKey("big_apple_oak_tree_plains");

    public static final ResourceKey<ConfiguredFeature<?, ?>> TALL_BLACKWOOD = RuFeatureUtils.createKey("tall_blackwood");
    public static final ResourceKey<ConfiguredFeature<?, ?>> BLACKWOOD_OAK = RuFeatureUtils.createKey("blackwood_oak");
    public static final ResourceKey<ConfiguredFeature<?, ?>> SMALL_BLACKWOOD = RuFeatureUtils.createKey("small_blackwood");
    public static final ResourceKey<ConfiguredFeature<?, ?>> BLACKWOOD_MUSHROOMS = RuFeatureUtils.createKey("blackwood_mushrooms");
    public static final ResourceKey<ConfiguredFeature<?, ?>> BLACKWOOD_DARK_OAK = RuFeatureUtils.createKey("blackwood_dark_oak");

    public static final ResourceKey<ConfiguredFeature<?, ?>> WILLOW_OAK = RuFeatureUtils.createKey("willow_oak");
    public static final ResourceKey<ConfiguredFeature<?, ?>> WHITE_OAK = RuFeatureUtils.createKey("white_oak");
    public static final ResourceKey<ConfiguredFeature<?, ?>> WILLOW = RuFeatureUtils.createKey("willow");
    public static final ResourceKey<ConfiguredFeature<?, ?>> SPRUCE = RuFeatureUtils.createKey("spruce");
    public static final ResourceKey<ConfiguredFeature<?, ?>> DEAD_SPRUCE = RuFeatureUtils.createKey("dead_spruce");
    public static final ResourceKey<ConfiguredFeature<?, ?>> BIG_WILLOW = RuFeatureUtils.createKey("big_willow");

    public static final ResourceKey<ConfiguredFeature<?, ?>> LARCH_TREE_FOREST = RuFeatureUtils.createKey("larch_tree_forest");
    public static final ResourceKey<ConfiguredFeature<?, ?>> BIG_LARCH_TREE_FOREST = RuFeatureUtils.createKey("big_larch_tree_forest");
    public static final ResourceKey<ConfiguredFeature<?, ?>> GIANT_LARCH_TREE_FOREST = RuFeatureUtils.createKey("giant_larch_tree_forest");

    public static final ResourceKey<ConfiguredFeature<?, ?>> GOLDEN_LARCH_TREE_FOREST = RuFeatureUtils.createKey("larch_golden_tree_forest");
    public static final ResourceKey<ConfiguredFeature<?, ?>> BIG_GOLDEN_LARCH_TREE_FOREST = RuFeatureUtils.createKey("big_golden_larch_tree_forest");
    public static final ResourceKey<ConfiguredFeature<?, ?>> GIANT_GOLDEN_LARCH_TREE_FOREST = RuFeatureUtils.createKey("giant_golden_larch_tree_forest");

    public static final ResourceKey<ConfiguredFeature<?, ?>> OAK_BUSH_FOREST = RuFeatureUtils.createKey("oak_bush_forest");
    public static final ResourceKey<ConfiguredFeature<?, ?>> OAK_BUSH_PLAINS = RuFeatureUtils.createKey("oak_bush_plains");

    public static final ResourceKey<ConfiguredFeature<?, ?>> BIRCH_FOREST_D = RuFeatureUtils.createKey("birch_forest_d");

    public static final ResourceKey<ConfiguredFeature<?, ?>> ACACIA_OAK_TREE = RuFeatureUtils.createKey("acacia_oak_tree");

    public static final ResourceKey<ConfiguredFeature<?, ?>> OAK_TREE = RuFeatureUtils.createKey("oak_tree");
    public static final ResourceKey<ConfiguredFeature<?, ?>> BIG_OAK_TREE = RuFeatureUtils.createKey("big_oak_tree");
    public static final ResourceKey<ConfiguredFeature<?, ?>> BIG_OAK_TREE_PLAINS = RuFeatureUtils.createKey("big_oak_tree_plains");
    public static final ResourceKey<ConfiguredFeature<?, ?>> MAPLE_SHORT = RuFeatureUtils.createKey("maple_short");
    public static final ResourceKey<ConfiguredFeature<?, ?>> DEAD_OAK_BUSH = RuFeatureUtils.createKey("dead_oak_bush");
    public static final ResourceKey<ConfiguredFeature<?, ?>> OAK_BUSH = RuFeatureUtils.createKey("oak_bush");
    public static final ResourceKey<ConfiguredFeature<?, ?>> RED_MAPLE_BUSH = RuFeatureUtils.createKey("red_maple_bush");
    public static final ResourceKey<ConfiguredFeature<?, ?>> OAK_BUSH_BLOB = RuFeatureUtils.createKey("oak_bush_blob");
    public static final ResourceKey<ConfiguredFeature<?, ?>> OAK_SHRUB_TERRACOTTA = RuFeatureUtils.createKey("oak_shrub_terracotta");
    public static final ResourceKey<ConfiguredFeature<?, ?>> OAK_SHRUB = RuFeatureUtils.createKey("oak_shrub");
    public static final ResourceKey<ConfiguredFeature<?, ?>> RED_MAPLE_SHRUB = RuFeatureUtils.createKey("red_maple_shrub");
    public static final ResourceKey<ConfiguredFeature<?, ?>> OAK_SHRUB_1 = RuFeatureUtils.createKey("oak_shrub_1");
    public static final ResourceKey<ConfiguredFeature<?, ?>> RED_MAPLE_SHRUB_1 = RuFeatureUtils.createKey("red_maple_shrub_1");
    public static final ResourceKey<ConfiguredFeature<?, ?>> PINE_SHRUB = RuFeatureUtils.createKey("pine_shrub");
    public static final ResourceKey<ConfiguredFeature<?, ?>> SPRUCE_SHRUB = RuFeatureUtils.createKey("spruce_shrub");
    public static final ResourceKey<ConfiguredFeature<?, ?>> DEAD_TRUNK = RuFeatureUtils.createKey("dead_trunk");

    public static final ResourceKey<ConfiguredFeature<?, ?>> PINE_MOUNTAIN = RuFeatureUtils.createKey("pine_mountain");
    public static final ResourceKey<ConfiguredFeature<?, ?>> PINE_MOSS = RuFeatureUtils.createKey("pine_moss");
    public static final ResourceKey<ConfiguredFeature<?, ?>> DEAD_PINE_MOUNTAIN = RuFeatureUtils.createKey("dead_pine_mountain");

    public static final ResourceKey<ConfiguredFeature<?, ?>> OLD_GROWTH_RAINFOREST_PALM = RuFeatureUtils.createKey("old_growth_rainforest_palm");
    public static final ResourceKey<ConfiguredFeature<?, ?>> OLD_GROWTH_RAINFOREST_MANGROVE = RuFeatureUtils.createKey("old_growth_rainforest_mangrove");
    public static final ResourceKey<ConfiguredFeature<?, ?>> OLD_GROWTH_RAINFOREST_JUNGLE_TREE = RuFeatureUtils.createKey("old_growth_rainforest_jungle_tree");
    public static final ResourceKey<ConfiguredFeature<?, ?>> OLD_GROWTH_RAINFOREST_BIG_JUNGLE_TREE = RuFeatureUtils.createKey("old_growth_rainforest_big_jungle_tree");
    public static final ResourceKey<ConfiguredFeature<?, ?>> OLD_GROWTH_RAINFOREST_SHRUB = RuFeatureUtils.createKey("old_growth_rainforest_shrub");
    public static final ResourceKey<ConfiguredFeature<?, ?>> SMALL_LARCH = RuFeatureUtils.createKey("small_larch");

    public static final ResourceKey<ConfiguredFeature<?, ?>> RAINFOREST_PALM = RuFeatureUtils.createKey("rainforest_palm");
    public static final ResourceKey<ConfiguredFeature<?, ?>> RAINFOREST_JUNGLE_TREE = RuFeatureUtils.createKey("rainforest_jungle_tree");
    public static final ResourceKey<ConfiguredFeature<?, ?>> RAINFOREST_BIG_JUNGLE_TREE = RuFeatureUtils.createKey("rainforest_big_jungle_tree");
    public static final ResourceKey<ConfiguredFeature<?, ?>> RAINFOREST_SHRUB = RuFeatureUtils.createKey("rainforest_shrub");

    public static final ResourceKey<ConfiguredFeature<?, ?>> WOODED_STEPPE_BIG_OAK = RuFeatureUtils.createKey("wooded_steppe_big_oak");
    public static final ResourceKey<ConfiguredFeature<?, ?>> WOODED_STEPPE_ACACIA = RuFeatureUtils.createKey("wooded_steppe_acacia");
    public static final ResourceKey<ConfiguredFeature<?, ?>> WOODED_STEPPE_BUSH = RuFeatureUtils.createKey("wooded_steppe_bush");

    public static final ResourceKey<ConfiguredFeature<?, ?>> ACACIA_SHRUB = RuFeatureUtils.createKey("acacia_shrub");
    public static final ResourceKey<ConfiguredFeature<?, ?>> WILLOW_SHRUB = RuFeatureUtils.createKey("willow_shrub");

    public static final ResourceKey<ConfiguredFeature<?, ?>> REDWOODS_GIANT_REDWOOD = RuFeatureUtils.createKey("redwoods_giant_redwood");
    public static final ResourceKey<ConfiguredFeature<?, ?>> REDWOODS_REDWOOD = RuFeatureUtils.createKey("redwoods_redwood");

    public static final ResourceKey<ConfiguredFeature<?, ?>> GIANT_CYPRESS = RuFeatureUtils.createKey("giant_cypress");
    public static final ResourceKey<ConfiguredFeature<?, ?>> GIANT_CYPRESS_MOSS = RuFeatureUtils.createKey("giant_cypress_moss");

    public static final ResourceKey<ConfiguredFeature<?, ?>> EUCALYPTUS_TREE_CANOPY = RuFeatureUtils.createKey("roofed_eucalyptus_forest_eucalyptus_tree_canopy");
    public static final ResourceKey<ConfiguredFeature<?, ?>> EUCALYPTUS_SHRUB = RuFeatureUtils.createKey("roofed_eucalyptus_forest_shrub");
    public static final ResourceKey<ConfiguredFeature<?, ?>> EUCALYPTUS_SAPLING = RuFeatureUtils.createKey("roofed_eucalyptus_forest_sapling");

    public static final ResourceKey<ConfiguredFeature<?, ?>> FUNGAL_FEN_BROWN_MUSHROOM = RuFeatureUtils.createKey("fungal_fen_brown_mushroom");
    public static final ResourceKey<ConfiguredFeature<?, ?>> FUNGAL_FEN_RED_MUSHROOM = RuFeatureUtils.createKey("fungal_fen_red_mushroom");

    public static final ResourceKey<ConfiguredFeature<?, ?>> DRY_BRUSHLAND_ACACIA = RuFeatureUtils.createKey("dry_brushland_acacia");
    public static final ResourceKey<ConfiguredFeature<?, ?>> DRY_BRUSHLAND_SHRUB = RuFeatureUtils.createKey("dry_brushland_shrub");
    public static final ResourceKey<ConfiguredFeature<?, ?>> DRY_BRUSHLAND_JOSHUA_SHRUB = RuFeatureUtils.createKey("dry_brushland_joshua_shrub");
    public static final ResourceKey<ConfiguredFeature<?, ?>> DRY_BRUSHLAND_SHRUB_SAND = RuFeatureUtils.createKey("dry_brushland_shrub_sand");
    public static final ResourceKey<ConfiguredFeature<?, ?>> DRY_BRUSHLAND_JOSHUA_SHRUB_SAND = RuFeatureUtils.createKey("dry_brushland_joshua_shrub_sand");


    public static final ResourceKey<ConfiguredFeature<?, ?>> SMALL_YELLOW_MUSHROOM = RuFeatureUtils.createKey("small_yellow_mushroom");
    public static final ResourceKey<ConfiguredFeature<?, ?>> MEDIUM_YELLOW_MUSHROOM = RuFeatureUtils.createKey("medium_yellow_mushroom");
    public static final ResourceKey<ConfiguredFeature<?, ?>> BIG_YELLOW_MUSHROOM = RuFeatureUtils.createKey("big_yellow_mushroom");

    public static final ResourceKey<ConfiguredFeature<?, ?>> LUSH_DELTA_AZALEA = RuFeatureUtils.createKey("lush_delta_azalea");

    public static void bootstrap(BootstapContext<ConfiguredFeature<?, ?>> treeBootstrap) {
        HolderGetter<Block> holderGetter = treeBootstrap.lookup(Registries.BLOCK);
        register(treeBootstrap, ALPHA_OAK_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.ALPHA_LOG.get().defaultBlockState()), new StraightTrunkPlacer(4, 2, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.ALPHA_LEAVES.get().defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build());

        register(treeBootstrap, BAMBOO_TREE, Feature.TREE,new TreeConfiguration.TreeConfigurationBuilder(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.BAMBOO_LOG.get().defaultBlockState(), 3).add(RegionsUnexploredBlocks.BAMBOO_LOG.get().defaultBlockState().setValue(BambooLogBlock.LEAVES, true), 1)),new StraightTrunkPlacer(12, 9, 0),new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.BAMBOO_LEAVES.get().defaultBlockState(), 5).add(RegionsUnexploredBlocks.BAMBOO_LEAVES.get().defaultBlockState(), 1)),new RandomSpreadFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), ConstantInt.of(5), 150), new TwoLayersFeatureSize(1, 0, 1)).decorators(ImmutableList.of(BambooLeaveDecorator.INSTANCE)).ignoreVines().dirt(BlockStateProvider.simple(Blocks.PODZOL)).build());

        register(treeBootstrap, FLOWERING_OAK_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()),new StraightTrunkPlacer(4, 3, 0),new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.OAK_LEAVES.defaultBlockState(), 3).add(RegionsUnexploredBlocks.FLOWERING_LEAVES.get().defaultBlockState(), 1)),new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build());
        register(treeBootstrap, BIG_FLOWERING_OAK_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()),new FancyTrunkPlacer(8, 11, 0),new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.OAK_LEAVES.defaultBlockState(), 3).add(RegionsUnexploredBlocks.FLOWERING_LEAVES.get().defaultBlockState(), 1)),new FancyFoliagePlacer(ConstantInt.of(2), ConstantInt.of(4), 4), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());

        register(treeBootstrap, APPLE_OAK_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()),new StraightTrunkPlacer(4, 2, 0),new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.OAK_LEAVES.defaultBlockState(), 18).add(RegionsUnexploredBlocks.APPLE_OAK_LEAVES.get().defaultBlockState(), 1).add(RegionsUnexploredBlocks.APPLE_OAK_LEAVES.get().defaultBlockState().setValue(AppleLeavesBlock.AGE, Integer.valueOf(1)), 1).add(RegionsUnexploredBlocks.APPLE_OAK_LEAVES.get().defaultBlockState().setValue(AppleLeavesBlock.AGE, Integer.valueOf(2)), 2).add(RegionsUnexploredBlocks.APPLE_OAK_LEAVES.get().defaultBlockState().setValue(AppleLeavesBlock.AGE, Integer.valueOf(3)), 2).add(RegionsUnexploredBlocks.APPLE_OAK_LEAVES.get().defaultBlockState().setValue(AppleLeavesBlock.AGE, Integer.valueOf(4)), 2)),new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build());
        register(treeBootstrap, BIG_APPLE_OAK_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()),new FancyTrunkPlacer(8, 11, 0),new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.OAK_LEAVES.defaultBlockState(), 14).add(RegionsUnexploredBlocks.APPLE_OAK_LEAVES.get().defaultBlockState(), 1).add(RegionsUnexploredBlocks.APPLE_OAK_LEAVES.get().defaultBlockState().setValue(AppleLeavesBlock.AGE, Integer.valueOf(1)), 1).add(RegionsUnexploredBlocks.APPLE_OAK_LEAVES.get().defaultBlockState().setValue(AppleLeavesBlock.AGE, Integer.valueOf(2)), 2).add(RegionsUnexploredBlocks.APPLE_OAK_LEAVES.get().defaultBlockState().setValue(AppleLeavesBlock.AGE, Integer.valueOf(3)), 2).add(RegionsUnexploredBlocks.APPLE_OAK_LEAVES.get().defaultBlockState().setValue(AppleLeavesBlock.AGE, Integer.valueOf(4)), 2)),new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(2), 3), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());

        register(treeBootstrap, BAOBAB_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.BAOBAB_LOG.get().defaultBlockState()),new ForkingTrunkPlacer(5, 2, 2),BlockStateProvider.simple(RegionsUnexploredBlocks.BAOBAB_LEAVES.get().defaultBlockState()),new AcaciaFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0)), new TwoLayersFeatureSize(1, 0, 2)).ignoreVines().build());
        register(treeBootstrap, BIG_BAOBAB_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.BAOBAB_LOG.get().defaultBlockState()),new DarkOakTrunkPlacer(9, 6, 1),BlockStateProvider.simple(RegionsUnexploredBlocks.BAOBAB_LEAVES.get().defaultBlockState()),new AcaciaFoliagePlacer(ConstantInt.of(3), ConstantInt.of(1)),new ThreeLayersFeatureSize(1, 1, 0, 1, 2, OptionalInt.empty())).ignoreVines().build());

        register(treeBootstrap, BLACKWOOD_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.BLACKWOOD_LOG.get().defaultBlockState()), new StraightTrunkPlacer(10, 2, 2), BlockStateProvider.simple(RegionsUnexploredBlocks.BLACKWOOD_LEAVES.get().defaultBlockState()), new SpruceFoliagePlacer(UniformInt.of(2, 3), UniformInt.of(2, 2), UniformInt.of(5, 5)), new TwoLayersFeatureSize(2, 0, 2)).ignoreVines().build());
        register(treeBootstrap, BIG_BLACKWOOD_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.BLACKWOOD_LOG.get().defaultBlockState()), new StraightTrunkPlacer(19, 4, 5), BlockStateProvider.simple(RegionsUnexploredBlocks.BLACKWOOD_LEAVES.get().defaultBlockState()), new MegaPineFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), UniformInt.of(13, 17)), new TwoLayersFeatureSize(1, 1, 2)).build());
        register(treeBootstrap, GIANT_BLACKWOOD_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.BLACKWOOD_LOG.get().defaultBlockState()), new GiantTrunkPlacer(22, 4, 5), BlockStateProvider.simple(RegionsUnexploredBlocks.BLACKWOOD_LEAVES.get().defaultBlockState()), new MegaPineFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), UniformInt.of(13, 17)), new TwoLayersFeatureSize(1, 1, 2)).build());

        register(treeBootstrap, CHERRY_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.CHERRY_LOG.get().defaultBlockState()), new StraightTrunkPlacer(4, 3, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.CHERRY_LEAVES.get().defaultBlockState()),new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build());
        register(treeBootstrap, BIG_CHERRY_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.CHERRY_LOG.get().defaultBlockState()),new FancyTrunkPlacer(8, 11, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.CHERRY_LEAVES.get().defaultBlockState()),new FancyFoliagePlacer(ConstantInt.of(2), ConstantInt.of(4), 4), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());
        register(treeBootstrap, RED_CHERRY_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.CHERRY_LOG.get().defaultBlockState()), new StraightTrunkPlacer(4, 3, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.RED_CHERRY_LEAVES.get().defaultBlockState()),new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build());
        register(treeBootstrap, RED_BIG_CHERRY_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.CHERRY_LOG.get().defaultBlockState()),new FancyTrunkPlacer(8, 11, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.RED_CHERRY_LEAVES.get().defaultBlockState()),new FancyFoliagePlacer(ConstantInt.of(2), ConstantInt.of(4), 4), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());
        register(treeBootstrap, PINK_CHERRY_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.CHERRY_LOG.get().defaultBlockState()), new StraightTrunkPlacer(4, 3, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.PINK_CHERRY_LEAVES.get().defaultBlockState()),new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build());
        register(treeBootstrap, PINK_BIG_CHERRY_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.CHERRY_LOG.get().defaultBlockState()),new FancyTrunkPlacer(8, 11, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.PINK_CHERRY_LEAVES.get().defaultBlockState()),new FancyFoliagePlacer(ConstantInt.of(2), ConstantInt.of(4), 4), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());
        register(treeBootstrap, WHITE_CHERRY_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.CHERRY_LOG.get().defaultBlockState()), new StraightTrunkPlacer(4, 3, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.WHITE_CHERRY_LEAVES.get().defaultBlockState()),new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build());
        register(treeBootstrap, WHITE_BIG_CHERRY_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.CHERRY_LOG.get().defaultBlockState()),new FancyTrunkPlacer(8, 11, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.WHITE_CHERRY_LEAVES.get().defaultBlockState()),new FancyFoliagePlacer(ConstantInt.of(2), ConstantInt.of(4), 4), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());

        //TODO Add rooted dirt to cypress trees
        register(treeBootstrap, CYPRESS_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.CYPRESS_LOG.get().defaultBlockState()), new StraightTrunkPlacer(10, 5, 2), BlockStateProvider.simple(RegionsUnexploredBlocks.CYPRESS_LEAVES.get().defaultBlockState()), new SpruceFoliagePlacer(UniformInt.of(2, 3), UniformInt.of(2, 2), UniformInt.of(5, 5)), new TwoLayersFeatureSize(2, 0, 2)).build());
        register(treeBootstrap, BIG_CYPRESS_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.CYPRESS_LOG.get().defaultBlockState()), new StraightTrunkPlacer(19, 4, 5), BlockStateProvider.simple(RegionsUnexploredBlocks.CYPRESS_LEAVES.get().defaultBlockState()), new MegaPineFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), UniformInt.of(13, 17)), new TwoLayersFeatureSize(1, 1, 2)).decorators(ImmutableList.of(CypressTrunkDecorator.INSTANCE)).build());
        register(treeBootstrap, CYPRESS_TREE_MOSS, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.CYPRESS_LOG.get().defaultBlockState()), new StraightTrunkPlacer(10, 5, 2), BlockStateProvider.simple(RegionsUnexploredBlocks.CYPRESS_LEAVES.get().defaultBlockState()), new SpruceFoliagePlacer(UniformInt.of(2, 3), UniformInt.of(2, 2), UniformInt.of(5, 5)), new TwoLayersFeatureSize(2, 0, 2)).decorators(ImmutableList.of(SpanishMossDecorator.INSTANCE)).build());
        register(treeBootstrap, BIG_CYPRESS_TREE_MOSS, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.CYPRESS_LOG.get().defaultBlockState()), new StraightTrunkPlacer(19, 4, 5), BlockStateProvider.simple(RegionsUnexploredBlocks.CYPRESS_LEAVES.get().defaultBlockState()), new MegaPineFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), UniformInt.of(13, 17)), new TwoLayersFeatureSize(1, 1, 2)).decorators(ImmutableList.of(SpanishMossDecorator.INSTANCE, CypressTrunkDecorator.INSTANCE)).build());

        register(treeBootstrap, DEAD_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.DEAD_LOG.get().defaultBlockState()), new StraightTrunkPlacer(6, 2, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.DEAD_LEAVES.get().defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).decorators(ImmutableList.of(DeadBranchDecorator.INSTANCE)).ignoreVines().build());
        register(treeBootstrap, BIG_DEAD_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.DEAD_LOG.get().defaultBlockState()),new FancyTrunkPlacer(12, 3, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.DEAD_LEAVES.get().defaultBlockState()),new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(2), 3), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());

        register(treeBootstrap, DEAD_PINE_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LOG.get().defaultBlockState()), new StraightTrunkPlacer(10, 2, 2),BlockStateProvider.simple(RegionsUnexploredBlocks.DEAD_PINE_LEAVES.get().defaultBlockState()),new SpruceFoliagePlacer(UniformInt.of(2, 3), UniformInt.of(2, 2), UniformInt.of(5, 5)), new TwoLayersFeatureSize(2, 0, 2)).ignoreVines().build());
        register(treeBootstrap, DEAD_PINE_TREE_TALL, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LOG.get().defaultBlockState()),new StraightTrunkPlacer(10, 2, 2),BlockStateProvider.simple(RegionsUnexploredBlocks.DEAD_PINE_LEAVES.get().defaultBlockState()),new PineFoliagePlacer(ConstantInt.of(1), ConstantInt.of(1), UniformInt.of(3, 4)), new TwoLayersFeatureSize(2, 0, 2)).ignoreVines().build());
        register(treeBootstrap, DEAD_SCOTTS_PINE_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LOG.get().defaultBlockState()), new StraightTrunkPlacer(10, 2, 2),BlockStateProvider.simple(RegionsUnexploredBlocks.DEAD_PINE_LEAVES.get().defaultBlockState()),new SpruceFoliagePlacer(UniformInt.of(2, 3), UniformInt.of(2, 2), UniformInt.of(5, 5)), new TwoLayersFeatureSize(2, 0, 2)).decorators(ImmutableList.of(PineTrunkDecorator.INSTANCE)).ignoreVines().build());
        register(treeBootstrap, DEAD_SCOTTS_PINE_TREE_TALL, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LOG.get().defaultBlockState()),new StraightTrunkPlacer(10, 2, 2),BlockStateProvider.simple(RegionsUnexploredBlocks.DEAD_PINE_LEAVES.get().defaultBlockState()),new PineFoliagePlacer(ConstantInt.of(1), ConstantInt.of(1), UniformInt.of(3, 4)), new TwoLayersFeatureSize(2, 0, 2)).decorators(ImmutableList.of(PineTrunkDecorator.INSTANCE)).ignoreVines().build());
        register(treeBootstrap, DEAD_GIANT_PINE_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LOG.get().defaultBlockState()), new GiantTrunkPlacer(22, 4, 5), BlockStateProvider.simple(RegionsUnexploredBlocks.DEAD_PINE_LEAVES.get().defaultBlockState()), new MegaPineFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), UniformInt.of(13, 17)), new TwoLayersFeatureSize(1, 1, 2)).build());

        register(treeBootstrap, EUCALYPTUS_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.EUCALYPTUS_LOG.get().defaultBlockState(), 3).add(RegionsUnexploredBlocks.EUCALYPTUS_LOG.get().defaultBlockState(), 1)), new StraightTrunkPlacer(14, 8, 0),new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.EUCALYPTUS_LEAVES.get().defaultBlockState(), 5).add(RegionsUnexploredBlocks.EUCALYPTUS_LEAVES.get().defaultBlockState(), 1)), new RandomSpreadFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), ConstantInt.of(5), 150), new TwoLayersFeatureSize(1, 0, 1)).decorators(ImmutableList.of(EucalyptusLeaveDecorator.INSTANCE, EucalyptusTrunkDecorator.INSTANCE,  new LeaveVineDecorator(0.25f))).ignoreVines().build());

        register(treeBootstrap, LARGE_JOSHUA_TREE, RuFeatureRegistry.LARGE_JOSHUA_TREE.get(), FeatureConfiguration.NONE);
        register(treeBootstrap, MEDIUM_JOSHUA_TREE, RuFeatureRegistry.MEDIUM_JOSHUA_TREE.get(), FeatureConfiguration.NONE);

        register(treeBootstrap, LARCH_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.LARCH_LOG.get().defaultBlockState()), new StraightTrunkPlacer(10, 2, 2), BlockStateProvider.simple(RegionsUnexploredBlocks.LARCH_LEAVES.get().defaultBlockState()), new SpruceFoliagePlacer(UniformInt.of(2, 3), UniformInt.of(2, 2), UniformInt.of(5, 5)), new TwoLayersFeatureSize(2, 0, 2)).ignoreVines().build());
        register(treeBootstrap, BIG_LARCH_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.LARCH_LOG.get().defaultBlockState()), new StraightTrunkPlacer(19, 4, 5), BlockStateProvider.simple(RegionsUnexploredBlocks.LARCH_LEAVES.get().defaultBlockState()), new MegaPineFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), UniformInt.of(13, 17)), new TwoLayersFeatureSize(1, 1, 2)).build());
        register(treeBootstrap, GIANT_LARCH_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.LARCH_LOG.get().defaultBlockState()), new GiantTrunkPlacer(22, 4, 5), BlockStateProvider.simple(RegionsUnexploredBlocks.LARCH_LEAVES.get().defaultBlockState()), new MegaPineFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), UniformInt.of(13, 17)), new TwoLayersFeatureSize(1, 1, 2)).build());

        register(treeBootstrap, GOLDEN_LARCH_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.LARCH_LOG.get().defaultBlockState()), new StraightTrunkPlacer(10, 2, 2), BlockStateProvider.simple(RegionsUnexploredBlocks.GOLDEN_LARCH_LEAVES.get().defaultBlockState()), new SpruceFoliagePlacer(UniformInt.of(2, 3), UniformInt.of(2, 2), UniformInt.of(5, 5)), new TwoLayersFeatureSize(2, 0, 2)).ignoreVines().build());
        register(treeBootstrap, BIG_GOLDEN_LARCH_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.LARCH_LOG.get().defaultBlockState()), new StraightTrunkPlacer(19, 4, 5), BlockStateProvider.simple(RegionsUnexploredBlocks.GOLDEN_LARCH_LEAVES.get().defaultBlockState()), new MegaPineFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), UniformInt.of(13, 17)), new TwoLayersFeatureSize(1, 1, 2)).build());
        register(treeBootstrap, GIANT_GOLDEN_LARCH_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.LARCH_LOG.get().defaultBlockState()), new GiantTrunkPlacer(22, 4, 5), BlockStateProvider.simple(RegionsUnexploredBlocks.GOLDEN_LARCH_LEAVES.get().defaultBlockState()), new MegaPineFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), UniformInt.of(13, 17)), new TwoLayersFeatureSize(1, 1, 2)).build());

        register(treeBootstrap, MAPLE_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.MAPLE_LOG.get().defaultBlockState()), new StraightTrunkPlacer(6, 2, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.MAPLE_LEAVES.get().defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build());
        register(treeBootstrap, BIG_MAPLE_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.MAPLE_LOG.get().defaultBlockState()),new FancyTrunkPlacer(8, 11, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.MAPLE_LEAVES.get().defaultBlockState()),new FancyFoliagePlacer(ConstantInt.of(2), ConstantInt.of(4), 4), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());
        register(treeBootstrap, RED_MAPLE_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.MAPLE_LOG.get().defaultBlockState()), new StraightTrunkPlacer(6, 2, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.RED_MAPLE_LEAVES.get().defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build());
        register(treeBootstrap, BIG_RED_MAPLE_TREE, Feature.TREE,new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.MAPLE_LOG.get().defaultBlockState()),new FancyTrunkPlacer(8, 11, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.RED_MAPLE_LEAVES.get().defaultBlockState()),new FancyFoliagePlacer(ConstantInt.of(2), ConstantInt.of(4), 4), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());
        register(treeBootstrap, ORANGE_MAPLE_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.MAPLE_LOG.get().defaultBlockState()), new StraightTrunkPlacer(6, 2, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.ORANGE_MAPLE_LEAVES.get().defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build());
        register(treeBootstrap, BIG_ORANGE_MAPLE_TREE, Feature.TREE,new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.MAPLE_LOG.get().defaultBlockState()),new FancyTrunkPlacer(8, 11, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.ORANGE_MAPLE_LEAVES.get().defaultBlockState()),new FancyFoliagePlacer(ConstantInt.of(2), ConstantInt.of(4), 4), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());

        register(treeBootstrap, MAUVE_OAK_BEE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.MAUVE_LOG.get().defaultBlockState()), new StraightTrunkPlacer(5, 2, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.MAUVE_LEAVES.get().defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).decorators(List.of(new BeehiveDecorator(1f))).ignoreVines().build());
        register(treeBootstrap, MAUVE_OAK, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.MAUVE_LOG.get().defaultBlockState()), new StraightTrunkPlacer(5, 2, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.MAUVE_LEAVES.get().defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build());
        register(treeBootstrap, BIG_MAUVE_OAK, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.MAUVE_LOG.get().defaultBlockState()), new FancyTrunkPlacer(8, 11, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.MAUVE_LEAVES.get().defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(2), ConstantInt.of(4), 4), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());

        register(treeBootstrap, PALM_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.PALM_LOG.get().defaultBlockState()), new StraightTrunkPlacer(8, 5, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.PALM_LEAVES.get().defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(0), 2), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().decorators(ImmutableList.of(PalmLeavesPlacer.INSTANCE)).build());

        register(treeBootstrap, PINE_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LOG.get().defaultBlockState()), new StraightTrunkPlacer(10, 2, 2),BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LEAVES.get().defaultBlockState()),new SpruceFoliagePlacer(UniformInt.of(2, 3), UniformInt.of(2, 2), UniformInt.of(5, 5)), new TwoLayersFeatureSize(2, 0, 2)).ignoreVines().build());
        register(treeBootstrap, PINE_TREE_TALL, Feature.TREE,new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LOG.get().defaultBlockState()),new StraightTrunkPlacer(10, 2, 2),BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LEAVES.get().defaultBlockState()),new PineFoliagePlacer(ConstantInt.of(1), ConstantInt.of(1), UniformInt.of(3, 4)), new TwoLayersFeatureSize(2, 0, 2)).ignoreVines().build());
        register(treeBootstrap, SCOTTS_PINE_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LOG.get().defaultBlockState()), new StraightTrunkPlacer(10, 2, 2),BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LEAVES.get().defaultBlockState()),new SpruceFoliagePlacer(UniformInt.of(2, 3), UniformInt.of(2, 2), UniformInt.of(5, 5)), new TwoLayersFeatureSize(2, 0, 2)).decorators(ImmutableList.of(PineTrunkDecorator.INSTANCE)).ignoreVines().build());
        register(treeBootstrap, SCOTTS_PINE_TREE_TALL, Feature.TREE,new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LOG.get().defaultBlockState()),new StraightTrunkPlacer(10, 2, 2),BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LEAVES.get().defaultBlockState()),new PineFoliagePlacer(ConstantInt.of(1), ConstantInt.of(1), UniformInt.of(3, 4)), new TwoLayersFeatureSize(2, 0, 2)).decorators(ImmutableList.of(PineTrunkDecorator.INSTANCE)).ignoreVines().build());
        register(treeBootstrap, GIANT_PINE_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LOG.get().defaultBlockState()), new GiantTrunkPlacer(22, 4, 5), BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LEAVES.get().defaultBlockState()), new MegaPineFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), UniformInt.of(13, 17)), new TwoLayersFeatureSize(1, 1, 2)).build());

        register(treeBootstrap, SAGUARO_CACTUS, Feature.TREE,new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.SAGUARO_CACTUS.get().defaultBlockState()),new StraightTrunkPlacer(7, 2, 0), BlockStateProvider.simple(RegionsUnexploredBlocks.CACTUS_FLOWER.get().defaultBlockState()),new BlobFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), 0), new TwoLayersFeatureSize(1, 0, 1)).dirt(BlockStateProvider.simple(Blocks.SAND)).decorators(ImmutableList.of(SaguaroCactusLimbs.INSTANCE)).ignoreVines().build());

        register(treeBootstrap, SILVER_BIRCH_ASPEN, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.BIRCH_LOG.defaultBlockState()), new StraightTrunkPlacer(7, 4, 0), new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.SILVER_BIRCH_LEAVES.get().defaultBlockState(), 3).add(Blocks.AIR.defaultBlockState(), 1)), new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(1), 7), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).decorators(ImmutableList.of(SilverBirchTrunkDecorator.INSTANCE, SilverBirchPlacer.INSTANCE)).ignoreVines().build());
        register(treeBootstrap, SILVER_BIRCH, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.BIRCH_LOG.defaultBlockState()), new StraightTrunkPlacer(7, 4, 0), BlockStateProvider.simple(RegionsUnexploredBlocks.SILVER_BIRCH_LEAVES.get().defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).decorators(ImmutableList.of(SilverBirchTrunkDecorator.INSTANCE, BirchStemDecorator.INSTANCE)).ignoreVines().build());

        register(treeBootstrap, REDWOOD_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.REDWOOD_LOG.get().defaultBlockState()), new StraightTrunkPlacer(19, 5, 3), BlockStateProvider.simple(RegionsUnexploredBlocks.REDWOOD_LEAVES.get().defaultBlockState()), new MegaPineFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), UniformInt.of(13, 17)), new TwoLayersFeatureSize(1, 1, 2)).decorators(ImmutableList.of(RedwoodBranchDecorator.INSTANCE)).build());
        register(treeBootstrap, GIANT_REDWOOD_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.REDWOOD_LOG.get().defaultBlockState()), new GiantTrunkPlacer(24, 2, 10), BlockStateProvider.simple(RegionsUnexploredBlocks.REDWOOD_LEAVES.get().defaultBlockState()), new MegaPineFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), UniformInt.of(13, 17)), new TwoLayersFeatureSize(1, 1, 2)).decorators(ImmutableList.of(RedwoodLeaveDecorator.INSTANCE, GiantRedwoodBranchDecorator.INSTANCE)).forceDirt().build());

        register(treeBootstrap, WILLOW_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.WILLOW_LOG.get().defaultBlockState()), new StraightTrunkPlacer(8, 2, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.WILLOW_LEAVES.get().defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(3), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).decorators(ImmutableList.of(new LeaveVineDecorator(0.25f), WillowTrunkDecorator.INSTANCE)).build());

        //BIOME_TREES
        register(treeBootstrap, ACACIA_OAK_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.ACACIA_LOG.defaultBlockState()), new StraightTrunkPlacer(5, 2, 0),BlockStateProvider.simple(Blocks.ACACIA_LEAVES.defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build());

        register(treeBootstrap, OAK_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()), new StraightTrunkPlacer(7, 2, 0),BlockStateProvider.simple(Blocks.OAK_LEAVES.defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build());
        register(treeBootstrap, BIG_OAK_TREE, Feature.TREE,new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()),new FancyTrunkPlacer(8, 11, 0),BlockStateProvider.simple(Blocks.OAK_LEAVES.defaultBlockState()),new FancyFoliagePlacer(ConstantInt.of(2), ConstantInt.of(4), 4), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());
        register(treeBootstrap, BIG_OAK_TREE_PLAINS, Feature.TREE,new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()),new FancyTrunkPlacer(8, 11, 0),BlockStateProvider.simple(Blocks.OAK_LEAVES.defaultBlockState()),new FancyFoliagePlacer(ConstantInt.of(2), ConstantInt.of(4), 4), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());

        register(treeBootstrap, MAPLE_SHORT, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.MAPLE_LOG.get().defaultBlockState()), new StraightTrunkPlacer(4, 2, 0),BlockStateProvider.simple(RegionsUnexploredBlocks.MAPLE_LEAVES.get().defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build());
        register(treeBootstrap, DEAD_OAK_BUSH, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.DEAD_LOG.get().defaultBlockState()), new StraightTrunkPlacer(1, 0, 0), BlockStateProvider.simple(RegionsUnexploredBlocks.DEAD_LEAVES.get().defaultBlockState()), new BushFoliagePlacer(ConstantInt.of(2), ConstantInt.of(1), 2), new TwoLayersFeatureSize(0, 0, 0)).dirt(BlockStateProvider.simple(RegionsUnexploredBlocks.ASH.get().defaultBlockState().setValue(AshBlock.HAS_GRAVITY, false))).build());
        register(treeBootstrap, OAK_BUSH, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()), new StraightTrunkPlacer(1, 0, 0), BlockStateProvider.simple(Blocks.OAK_LEAVES.defaultBlockState()), new BushFoliagePlacer(ConstantInt.of(2), ConstantInt.of(1), 2), new TwoLayersFeatureSize(0, 0, 0)).build());
        register(treeBootstrap, RED_MAPLE_BUSH, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.MAPLE_LOG.get().defaultBlockState()), new StraightTrunkPlacer(1, 0, 0), BlockStateProvider.simple(RegionsUnexploredBlocks.RED_MAPLE_LEAVES.get().defaultBlockState()), new BushFoliagePlacer(ConstantInt.of(2), ConstantInt.of(1), 2), new TwoLayersFeatureSize(0, 0, 0)).build());
        register(treeBootstrap, OAK_BUSH_BLOB, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()), new StraightTrunkPlacer(1, 0, 0),BlockStateProvider.simple(Blocks.OAK_LEAVES.defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build());
        register(treeBootstrap, OAK_SHRUB_TERRACOTTA, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()), new StraightTrunkPlacer(2, 0, 0), BlockStateProvider.simple(Blocks.OAK_LEAVES.defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(0), 2), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().dirt(BlockStateProvider.simple(Blocks.TERRACOTTA)).build());
        register(treeBootstrap, OAK_SHRUB, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()), new StraightTrunkPlacer(2, 0, 0), BlockStateProvider.simple(Blocks.OAK_LEAVES.defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(0), 2), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());
        register(treeBootstrap, RED_MAPLE_SHRUB, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.MAPLE_LOG.get().defaultBlockState()), new StraightTrunkPlacer(2, 0, 0), BlockStateProvider.simple(RegionsUnexploredBlocks.RED_MAPLE_LEAVES.get().defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(0), 2), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());
        register(treeBootstrap, OAK_SHRUB_1, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()), new StraightTrunkPlacer(1, 0, 0), BlockStateProvider.simple(Blocks.OAK_LEAVES.defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(0), 2), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());
        register(treeBootstrap, RED_MAPLE_SHRUB_1, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.MAPLE_LOG.get().defaultBlockState()), new StraightTrunkPlacer(1, 0, 0), BlockStateProvider.simple(RegionsUnexploredBlocks.RED_MAPLE_LEAVES.get().defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(0), 2), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());
        register(treeBootstrap, SPRUCE_SHRUB, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.SPRUCE_LOG.defaultBlockState()), new StraightTrunkPlacer(2, 0, 0), BlockStateProvider.simple(Blocks.SPRUCE_LEAVES.defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(0), 2), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());
        register(treeBootstrap, DEAD_TRUNK, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.DEAD_LOG.get().defaultBlockState()), new StraightTrunkPlacer(7, 4, 0), new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.DEAD_LEAVES.get().defaultBlockState(), 2).add(Blocks.AIR.defaultBlockState(), 3)), new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(1), 7), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).decorators(ImmutableList.of(DeadPlacer.INSTANCE, DeadStemDecorator.INSTANCE, DeadBranchDecorator.INSTANCE)).ignoreVines().build());
        //blackwood
        register(treeBootstrap, TALL_BLACKWOOD, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.BLACKWOOD_LOG.get().defaultBlockState()), new StraightTrunkPlacer(19, 5, 3), BlockStateProvider.simple(RegionsUnexploredBlocks.BLACKWOOD_LEAVES.get().defaultBlockState()), new MegaPineFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), UniformInt.of(13, 17)), new TwoLayersFeatureSize(1, 1, 2)).decorators(ImmutableList.of(BlackwoodBranchDecorator.INSTANCE)).build());
        register(treeBootstrap, BLACKWOOD_OAK, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.BLACKWOOD_LOG.get().defaultBlockState()), new StraightTrunkPlacer(7, 2, 0), BlockStateProvider.simple(RegionsUnexploredBlocks.BLACKWOOD_LEAVES.get().defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build());
        register(treeBootstrap, SMALL_BLACKWOOD, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.BLACKWOOD_LOG.get().defaultBlockState()), new StraightTrunkPlacer(14, 2, 2), BlockStateProvider.simple(RegionsUnexploredBlocks.BLACKWOOD_LEAVES.get().defaultBlockState()), new SpruceFoliagePlacer(UniformInt.of(2, 3), UniformInt.of(2, 2), UniformInt.of(5, 5)), new TwoLayersFeatureSize(2, 0, 2)).ignoreVines().build());
        register(treeBootstrap, BLACKWOOD_MUSHROOMS, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.MUSHROOM_STEM.defaultBlockState()), new StraightTrunkPlacer(2, 1, 0), BlockStateProvider.simple(Blocks.MUSHROOM_STEM.defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), 0), new TwoLayersFeatureSize(0, 0, 0)).decorators(ImmutableList.of(BlackwoodBioshroom.INSTANCE)).ignoreVines().build());
        register(treeBootstrap, BLACKWOOD_DARK_OAK, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.DARK_OAK_LOG.defaultBlockState()), new FancyTrunkPlacer(8, 11, 0), BlockStateProvider.simple(Blocks.DARK_OAK_LEAVES.defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(2), ConstantInt.of(4), 4), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());
        //willow
        register(treeBootstrap, WILLOW_OAK, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()), new StraightTrunkPlacer(7, 4, 0), new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.OAK_LEAVES.defaultBlockState(), 3).add(Blocks.AIR.defaultBlockState(), 1)), new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(1), 7), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).decorators(ImmutableList.of(OakPlacer.INSTANCE)).ignoreVines().build());
        register(treeBootstrap, WHITE_OAK, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()), new StraightTrunkPlacer(5, 4, 0), BlockStateProvider.simple(RegionsUnexploredBlocks.WHITE_CHERRY_LEAVES.get().defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build());
        register(treeBootstrap, WILLOW, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.WILLOW_LOG.get().defaultBlockState()), new StraightTrunkPlacer(7, 4, 0), new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.WILLOW_LEAVES.get().defaultBlockState(), 3).add(Blocks.AIR.defaultBlockState(), 1)), new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(1), 7), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).decorators(ImmutableList.of(WillowPlacer.INSTANCE)).ignoreVines().build());
        register(treeBootstrap, SPRUCE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.SPRUCE_LOG.defaultBlockState()), new StraightTrunkPlacer(13, 2, 2), BlockStateProvider.simple(Blocks.SPRUCE_LEAVES.defaultBlockState()), new SpruceFoliagePlacer(UniformInt.of(2, 3), UniformInt.of(2, 2), UniformInt.of(5, 5)), new TwoLayersFeatureSize(2, 0, 2)).ignoreVines().build());
        register(treeBootstrap, DEAD_SPRUCE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.SPRUCE_LOG.defaultBlockState()), new StraightTrunkPlacer(10, 2, 2), BlockStateProvider.simple(RegionsUnexploredBlocks.DEAD_PINE_LEAVES.get().defaultBlockState()), new SpruceFoliagePlacer(UniformInt.of(2, 3), UniformInt.of(2, 2), UniformInt.of(5, 5)), new TwoLayersFeatureSize(2, 0, 2)).ignoreVines().build());
        register(treeBootstrap, BIG_WILLOW, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.WILLOW_LOG.get().defaultBlockState()), new FancyTrunkPlacer(8, 11, 0), BlockStateProvider.simple(RegionsUnexploredBlocks.WILLOW_LEAVES.get().defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(2), ConstantInt.of(4), 4), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());

        register(treeBootstrap, LARCH_TREE_FOREST, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.LARCH_LOG.get().defaultBlockState()), new StraightTrunkPlacer(10, 2, 2), BlockStateProvider.simple(RegionsUnexploredBlocks.LARCH_LEAVES.get().defaultBlockState()), new SpruceFoliagePlacer(UniformInt.of(2, 3), UniformInt.of(2, 2), UniformInt.of(5, 5)), new TwoLayersFeatureSize(2, 0, 2)).ignoreVines().build());
        register(treeBootstrap, BIG_LARCH_TREE_FOREST, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.LARCH_LOG.get().defaultBlockState()), new StraightTrunkPlacer(19, 4, 5), BlockStateProvider.simple(RegionsUnexploredBlocks.LARCH_LEAVES.get().defaultBlockState()), new MegaPineFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), UniformInt.of(13, 17)), new TwoLayersFeatureSize(1, 1, 2)).build());
        register(treeBootstrap, GIANT_LARCH_TREE_FOREST, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.LARCH_LOG.get().defaultBlockState()), new GiantTrunkPlacer(22, 4, 5), BlockStateProvider.simple(RegionsUnexploredBlocks.LARCH_LEAVES.get().defaultBlockState()), new MegaPineFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), UniformInt.of(13, 17)), new TwoLayersFeatureSize(1, 1, 2)).build());

        register(treeBootstrap, GOLDEN_LARCH_TREE_FOREST, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.LARCH_LOG.get().defaultBlockState()), new StraightTrunkPlacer(10, 2, 2), BlockStateProvider.simple(RegionsUnexploredBlocks.GOLDEN_LARCH_LEAVES.get().defaultBlockState()), new SpruceFoliagePlacer(UniformInt.of(2, 3), UniformInt.of(2, 2), UniformInt.of(5, 5)), new TwoLayersFeatureSize(2, 0, 2)).ignoreVines().build());
        register(treeBootstrap, BIG_GOLDEN_LARCH_TREE_FOREST, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.LARCH_LOG.get().defaultBlockState()), new StraightTrunkPlacer(19, 4, 5), BlockStateProvider.simple(RegionsUnexploredBlocks.GOLDEN_LARCH_LEAVES.get().defaultBlockState()), new MegaPineFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), UniformInt.of(13, 17)), new TwoLayersFeatureSize(1, 1, 2)).build());
        register(treeBootstrap, GIANT_GOLDEN_LARCH_TREE_FOREST, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.LARCH_LOG.get().defaultBlockState()), new GiantTrunkPlacer(22, 4, 5), BlockStateProvider.simple(RegionsUnexploredBlocks.GOLDEN_LARCH_LEAVES.get().defaultBlockState()), new MegaPineFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), UniformInt.of(13, 17)), new TwoLayersFeatureSize(1, 1, 2)).build());

        register(treeBootstrap, OAK_BUSH_FOREST, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()), new StraightTrunkPlacer(1, 0, 0), BlockStateProvider.simple(Blocks.OAK_LEAVES.defaultBlockState()), new BushFoliagePlacer(ConstantInt.of(2), ConstantInt.of(1), 2), new TwoLayersFeatureSize(0, 0, 0)).build());
        register(treeBootstrap, OAK_BUSH_PLAINS, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()), new StraightTrunkPlacer(1, 0, 0), BlockStateProvider.simple(Blocks.OAK_LEAVES.defaultBlockState()), new BushFoliagePlacer(ConstantInt.of(2), ConstantInt.of(1), 2), new TwoLayersFeatureSize(0, 0, 0)).build());

        register(treeBootstrap, APPLE_OAK_TREE_PLAINS, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()),new StraightTrunkPlacer(4, 2, 0),new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.OAK_LEAVES.defaultBlockState(), 18).add(RegionsUnexploredBlocks.APPLE_OAK_LEAVES.get().defaultBlockState(), 1).add(RegionsUnexploredBlocks.APPLE_OAK_LEAVES.get().defaultBlockState().setValue(AppleLeavesBlock.AGE, Integer.valueOf(1)), 1).add(RegionsUnexploredBlocks.APPLE_OAK_LEAVES.get().defaultBlockState().setValue(AppleLeavesBlock.AGE, Integer.valueOf(2)), 2)),new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build());
        register(treeBootstrap, BIG_APPLE_OAK_TREE_PLAINS, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()),new FancyTrunkPlacer(8, 11, 0),new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.OAK_LEAVES.defaultBlockState(), 14).add(RegionsUnexploredBlocks.APPLE_OAK_LEAVES.get().defaultBlockState(), 1).add(RegionsUnexploredBlocks.APPLE_OAK_LEAVES.get().defaultBlockState().setValue(AppleLeavesBlock.AGE, Integer.valueOf(1)), 1).add(RegionsUnexploredBlocks.APPLE_OAK_LEAVES.get().defaultBlockState().setValue(AppleLeavesBlock.AGE, Integer.valueOf(2)), 2)),new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(2), 3), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());

        register(treeBootstrap, BIRCH_FOREST_D, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.BIRCH_LOG.defaultBlockState()), new StraightTrunkPlacer(7, 4, 0), BlockStateProvider.simple(Blocks.BIRCH_LEAVES.defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).decorators(ImmutableList.of(SilverBirchTrunkDecorator.INSTANCE, BirchStemDecorator.INSTANCE)).ignoreVines().build());
        register(treeBootstrap, PINE_SHRUB, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LOG.get().defaultBlockState()), new StraightTrunkPlacer(2, 1, 0), BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LEAVES.get().defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(0), 2), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());

        register(treeBootstrap, PINE_MOUNTAIN, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LOG.get().defaultBlockState()), new StraightTrunkPlacer(13, 4, 2), BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LEAVES.get().defaultBlockState()), new SpruceFoliagePlacer(UniformInt.of(2, 3), UniformInt.of(2, 2), UniformInt.of(8, 8)), new TwoLayersFeatureSize(2, 0, 2)).forceDirt().decorators(ImmutableList.of(PineTrunkDecorator.INSTANCE, PineBranchDecorator.INSTANCE)).ignoreVines().build());
        register(treeBootstrap, PINE_MOSS, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LOG.get().defaultBlockState()), new StraightTrunkPlacer(13, 4, 2), BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LEAVES.get().defaultBlockState()), new SpruceFoliagePlacer(UniformInt.of(2, 3), UniformInt.of(2, 2), UniformInt.of(8, 8)), new TwoLayersFeatureSize(2, 0, 2)).forceDirt().decorators(ImmutableList.of(PineTrunkDecorator.INSTANCE, PineBranchDecorator.INSTANCE, new LeaveVineDecorator(0.25f))).ignoreVines().build());
        register(treeBootstrap, DEAD_PINE_MOUNTAIN, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LOG.get().defaultBlockState()), new StraightTrunkPlacer(13, 4, 2), BlockStateProvider.simple(RegionsUnexploredBlocks.DEAD_PINE_LEAVES.get().defaultBlockState()), new SpruceFoliagePlacer(UniformInt.of(2, 3), UniformInt.of(2, 2), UniformInt.of(8, 8)), new TwoLayersFeatureSize(2, 0, 2)).forceDirt().decorators(ImmutableList.of(PineTrunkDecorator.INSTANCE, DeadPineBranchDecorator.INSTANCE)).ignoreVines().build());

        register(treeBootstrap, OLD_GROWTH_RAINFOREST_PALM, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.PALM_LOG.get().defaultBlockState()), new StraightTrunkPlacer(12, 4, 0), BlockStateProvider.simple(RegionsUnexploredBlocks.PALM_LEAVES.get().defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(0), 2), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).decorators(ImmutableList.of(PalmLeavesPlacer.INSTANCE)).ignoreVines().build());
        register(treeBootstrap, OLD_GROWTH_RAINFOREST_MANGROVE, Feature.TREE, (new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.MANGROVE_LOG), new UpwardsBranchingTrunkPlacer(2, 1, 4, UniformInt.of(1, 4), 0.5F, UniformInt.of(0, 1), holderGetter.getOrThrow(BlockTags.MANGROVE_LOGS_CAN_GROW_THROUGH)), BlockStateProvider.simple(Blocks.MANGROVE_LEAVES), new RandomSpreadFoliagePlacer(ConstantInt.of(3), ConstantInt.of(0), ConstantInt.of(2), 70), Optional.of(new MangroveRootPlacer(UniformInt.of(1, 3), BlockStateProvider.simple(Blocks.MANGROVE_ROOTS), Optional.of(new AboveRootPlacement(BlockStateProvider.simple(Blocks.MOSS_CARPET), 0.5F)), new MangroveRootPlacement(holderGetter.getOrThrow(BlockTags.MANGROVE_ROOTS_CAN_GROW_THROUGH), HolderSet.direct(Block::builtInRegistryHolder, Blocks.MUD, Blocks.MUDDY_MANGROVE_ROOTS), BlockStateProvider.simple(Blocks.MUDDY_MANGROVE_ROOTS), 8, 15, 0.2F))), new TwoLayersFeatureSize(2, 0, 2))).decorators(List.of(new LeaveVineDecorator(0.125F), new AttachedToLeavesDecorator(0.14F, 1, 0, new RandomizedIntStateProvider(BlockStateProvider.simple(Blocks.MANGROVE_PROPAGULE.defaultBlockState().setValue(MangrovePropaguleBlock.HANGING, Boolean.valueOf(true))), MangrovePropaguleBlock.AGE, UniformInt.of(0, 4)), 2, List.of(Direction.DOWN)))).ignoreVines().build());
        register(treeBootstrap, OLD_GROWTH_RAINFOREST_JUNGLE_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.JUNGLE_LOG.defaultBlockState()), new StraightTrunkPlacer(5, 3, 0), BlockStateProvider.simple(Blocks.JUNGLE_LEAVES.defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).decorators(ImmutableList.of(new LeaveVineDecorator(0.25f))).build());
        register(treeBootstrap, OLD_GROWTH_RAINFOREST_BIG_JUNGLE_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.JUNGLE_LOG.defaultBlockState()), new FancyTrunkPlacer(8, 11, 0), BlockStateProvider.simple(Blocks.JUNGLE_LEAVES.defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(2), ConstantInt.of(4), 4), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().decorators(ImmutableList.of(new LeaveVineDecorator(0.25f))).build());
        register(treeBootstrap, OLD_GROWTH_RAINFOREST_SHRUB, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()), new StraightTrunkPlacer(1, 0, 0), BlockStateProvider.simple(Blocks.OAK_LEAVES.defaultBlockState()), new BushFoliagePlacer(ConstantInt.of(2), ConstantInt.of(1), 2), new TwoLayersFeatureSize(0, 0, 0)).ignoreVines().build());

        register(treeBootstrap, RAINFOREST_PALM, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.PALM_LOG.get().defaultBlockState()), new StraightTrunkPlacer(8, 4, 0), BlockStateProvider.simple(RegionsUnexploredBlocks.PALM_LEAVES.get().defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(0), 2), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).decorators(ImmutableList.of(PalmLeavesPlacer.INSTANCE)).ignoreVines().build());
        register(treeBootstrap, RAINFOREST_JUNGLE_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.JUNGLE_LOG.defaultBlockState()), new StraightTrunkPlacer(5, 3, 0), BlockStateProvider.simple(Blocks.JUNGLE_LEAVES.defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).decorators(ImmutableList.of(new LeaveVineDecorator(0.25f))).build());
        register(treeBootstrap, RAINFOREST_BIG_JUNGLE_TREE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.JUNGLE_LOG.defaultBlockState()), new FancyTrunkPlacer(8, 11, 0), BlockStateProvider.simple(Blocks.JUNGLE_LEAVES.defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(2), ConstantInt.of(4), 4), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().decorators(ImmutableList.of(new LeaveVineDecorator(0.25f))).build());
        register(treeBootstrap, RAINFOREST_SHRUB, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()), new StraightTrunkPlacer(1, 0, 0), BlockStateProvider.simple(Blocks.OAK_LEAVES.defaultBlockState()), new BushFoliagePlacer(ConstantInt.of(2), ConstantInt.of(1), 2), new TwoLayersFeatureSize(0, 0, 0)).ignoreVines().build());

        register(treeBootstrap, WOODED_STEPPE_BIG_OAK, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()), new FancyTrunkPlacer(6, 11, 0), BlockStateProvider.simple(Blocks.OAK_LEAVES.defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(2), ConstantInt.of(4), 4), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());
        register(treeBootstrap, WOODED_STEPPE_ACACIA, Feature.TREE, (new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.ACACIA_LOG), new ForkingTrunkPlacer(7, 2, 2), BlockStateProvider.simple(Blocks.ACACIA_LEAVES), new AcaciaFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0)), new TwoLayersFeatureSize(1, 0, 2))).ignoreVines().build());
        register(treeBootstrap, WOODED_STEPPE_BUSH, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()), new StraightTrunkPlacer(1, 0, 0), BlockStateProvider.simple(Blocks.OAK_LEAVES.defaultBlockState()), new BushFoliagePlacer(ConstantInt.of(2), ConstantInt.of(1), 2), new TwoLayersFeatureSize(0, 0, 0)).build());

        register(treeBootstrap, ACACIA_SHRUB, Feature.TREE, (new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.ACACIA_LOG), new ForkingTrunkPlacer(1, 2, 2), BlockStateProvider.simple(Blocks.ACACIA_LEAVES), new AcaciaFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0)), new TwoLayersFeatureSize(1, 0, 2))).ignoreVines().build());

        register(treeBootstrap, REDWOODS_GIANT_REDWOOD, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.REDWOOD_LOG.get().defaultBlockState()), new GiantTrunkPlacer(24, 2, 10), BlockStateProvider.simple(RegionsUnexploredBlocks.REDWOOD_LEAVES.get().defaultBlockState()), new MegaPineFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), UniformInt.of(13, 17)), new TwoLayersFeatureSize(1, 1, 2)).decorators(ImmutableList.of(RedwoodTrunkDecorator.INSTANCE, RedwoodLeaveDecorator.INSTANCE, GiantRedwoodBranchDecorator.INSTANCE)).forceDirt().build());
        register(treeBootstrap, REDWOODS_REDWOOD, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.REDWOOD_LOG.get().defaultBlockState()), new StraightTrunkPlacer(19, 5, 3), BlockStateProvider.simple(RegionsUnexploredBlocks.REDWOOD_LEAVES.get().defaultBlockState()), new MegaPineFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), UniformInt.of(13, 17)), new TwoLayersFeatureSize(1, 1, 2)).decorators(ImmutableList.of(RedwoodBranchDecorator.INSTANCE)).build());

        register(treeBootstrap, GIANT_CYPRESS, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.CYPRESS_LOG.get().defaultBlockState()), new StraightTrunkPlacer(26, 5, 0), BlockStateProvider.simple(RegionsUnexploredBlocks.CYPRESS_LEAVES.get().defaultBlockState()), new MegaPineFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), UniformInt.of(13, 17)), new TwoLayersFeatureSize(1, 1, 2)).ignoreVines().decorators(ImmutableList.of(GiantCypressTrunkDecorator.INSTANCE, GiantCypressLeaveDecorator.INSTANCE)).build());
        register(treeBootstrap, GIANT_CYPRESS_MOSS, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.CYPRESS_LOG.get().defaultBlockState()), new StraightTrunkPlacer(26, 5, 0), BlockStateProvider.simple(RegionsUnexploredBlocks.CYPRESS_LEAVES.get().defaultBlockState()), new MegaPineFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), UniformInt.of(13, 17)), new TwoLayersFeatureSize(1, 1, 2)).ignoreVines().decorators(ImmutableList.of(SpanishMossDecorator.INSTANCE, GiantCypressTrunkDecorator.INSTANCE, GiantCypressLeaveDecorator.INSTANCE)).build());

        register(treeBootstrap, EUCALYPTUS_TREE_CANOPY, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.EUCALYPTUS_LOG.get().defaultBlockState(), 3).add(RegionsUnexploredBlocks.EUCALYPTUS_LOG.get().defaultBlockState(), 1)), new StraightTrunkPlacer(14, 8, 0),new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RegionsUnexploredBlocks.EUCALYPTUS_LEAVES.get().defaultBlockState(), 5).add(RegionsUnexploredBlocks.EUCALYPTUS_LEAVES.get().defaultBlockState(), 1)), new PineFoliagePlacer(ConstantInt.of(1), ConstantInt.of(1), UniformInt.of(4, 4)), new TwoLayersFeatureSize(1, 0, 1)).decorators(ImmutableList.of(EucalyptusTrunkDecorator.INSTANCE, new LeaveVineDecorator(0.25f))).ignoreVines().build());
        register(treeBootstrap, EUCALYPTUS_SHRUB, Feature.TREE, (new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.EUCALYPTUS_LOG.get().defaultBlockState()), new ForkingTrunkPlacer(1, 2, 2), BlockStateProvider.simple(RegionsUnexploredBlocks.EUCALYPTUS_LEAVES.get().defaultBlockState()), new AcaciaFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0)), new TwoLayersFeatureSize(1, 0, 2))).ignoreVines().build());
        register(treeBootstrap, EUCALYPTUS_SAPLING, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()), new StraightTrunkPlacer(2, 1, 0), BlockStateProvider.simple(Blocks.OAK_LEAVES.defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(0), 2), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());

        register(treeBootstrap, FUNGAL_FEN_BROWN_MUSHROOM, Feature.TREE, (new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.MUSHROOM_STEM), new ForkingTrunkPlacer(7, 3, 2), BlockStateProvider.simple(Blocks.BROWN_MUSHROOM_BLOCK.defaultBlockState().setValue(HugeMushroomBlock.DOWN, false)), new AcaciaFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0)), new TwoLayersFeatureSize(1, 0, 2))).ignoreVines().build());
        register(treeBootstrap, FUNGAL_FEN_RED_MUSHROOM, Feature.TREE, (new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.MUSHROOM_STEM), new ForkingTrunkPlacer(3, 3, 2), BlockStateProvider.simple(Blocks.RED_MUSHROOM_BLOCK.defaultBlockState().setValue(HugeMushroomBlock.DOWN, false)), new AcaciaFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0)), new TwoLayersFeatureSize(1, 0, 2))).ignoreVines().build());

        register(treeBootstrap, DRY_BRUSHLAND_ACACIA, Feature.TREE, (new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.ACACIA_LOG), new ForkingTrunkPlacer(5, 2, 2), BlockStateProvider.simple(Blocks.ACACIA_LEAVES), new AcaciaFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0)), new TwoLayersFeatureSize(1, 0, 2))).ignoreVines().build());
        register(treeBootstrap, DRY_BRUSHLAND_SHRUB, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()), new StraightTrunkPlacer(3, 0, 0), BlockStateProvider.simple(Blocks.OAK_LEAVES.defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(0), 2), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());
        register(treeBootstrap, DRY_BRUSHLAND_JOSHUA_SHRUB, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.JOSHUA_LOG.get().defaultBlockState()), new StraightTrunkPlacer(3, 0, 0), BlockStateProvider.simple(Blocks.OAK_LEAVES.defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(0), 2), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());
        register(treeBootstrap, DRY_BRUSHLAND_SHRUB_SAND, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()), new StraightTrunkPlacer(1, 1, 0), BlockStateProvider.simple(Blocks.OAK_LEAVES.defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(0), 2), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());
        register(treeBootstrap, DRY_BRUSHLAND_JOSHUA_SHRUB_SAND, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.JOSHUA_LOG.get().defaultBlockState()), new StraightTrunkPlacer(1, 1, 0), BlockStateProvider.simple(Blocks.OAK_LEAVES.defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(0), 2), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());

        register(treeBootstrap, WILLOW_SHRUB, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()), new StraightTrunkPlacer(2, 1, 0), BlockStateProvider.simple(RegionsUnexploredBlocks.CYPRESS_LEAVES.get().defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(0), 2), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().decorators(ImmutableList.of(WillowPalmPlacer.INSTANCE)).build());
        register(treeBootstrap, SMALL_LARCH, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.LARCH_LOG.get().defaultBlockState()), new StraightTrunkPlacer(7, 2, 2), BlockStateProvider.simple(RegionsUnexploredBlocks.LARCH_LEAVES.get().defaultBlockState()), new SpruceFoliagePlacer(UniformInt.of(2, 3), UniformInt.of(2, 2), UniformInt.of(5, 5)), new TwoLayersFeatureSize(2, 0, 2)).ignoreVines().build());
        register(treeBootstrap, SMALL_PINE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LOG.get().defaultBlockState()), new StraightTrunkPlacer(8, 2, 2), BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LEAVES.get().defaultBlockState()), new SpruceFoliagePlacer(UniformInt.of(2, 3), UniformInt.of(2, 2), UniformInt.of(5, 5)), new TwoLayersFeatureSize(2, 0, 2)).ignoreVines().build());
        register(treeBootstrap, SMALL_SCOTTS_PINE, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LOG.get().defaultBlockState()), new StraightTrunkPlacer(8, 2, 2), BlockStateProvider.simple(RegionsUnexploredBlocks.PINE_LEAVES.get().defaultBlockState()), new SpruceFoliagePlacer(UniformInt.of(2, 3), UniformInt.of(2, 2), UniformInt.of(5, 5)), new TwoLayersFeatureSize(2, 0, 2)).ignoreVines().decorators(ImmutableList.of(PineTrunkDecorator.INSTANCE)).build());

        register(treeBootstrap, SMALL_YELLOW_MUSHROOM, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.MUSHROOM_STEM.defaultBlockState()), new StraightTrunkPlacer(2, 1, 0), BlockStateProvider.simple(Blocks.MUSHROOM_STEM.defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), 0), new TwoLayersFeatureSize(0, 0, 0)).dirt(BlockStateProvider.simple(Blocks.MUSHROOM_STEM)).decorators(ImmutableList.of(SmallYellowBioshroomCaps.INSTANCE)).ignoreVines().build());
        register(treeBootstrap, MEDIUM_YELLOW_MUSHROOM, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.MUSHROOM_STEM.defaultBlockState()), new StraightTrunkPlacer(4, 3, 0), BlockStateProvider.simple(Blocks.MUSHROOM_STEM.defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), 0), new TwoLayersFeatureSize(0, 0, 0)).dirt(BlockStateProvider.simple(Blocks.MUSHROOM_STEM)).decorators(ImmutableList.of(MediumYellowBioshroomCaps.INSTANCE)).ignoreVines().build());
        register(treeBootstrap, BIG_YELLOW_MUSHROOM, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.MUSHROOM_STEM.defaultBlockState()), new StraightTrunkPlacer(7, 4, 0), BlockStateProvider.simple(Blocks.MUSHROOM_STEM.defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), 0), new TwoLayersFeatureSize(0, 0, 0)).dirt(BlockStateProvider.simple(Blocks.MUSHROOM_STEM)).decorators(ImmutableList.of(BigYellowBioshroomCaps.INSTANCE)).ignoreVines().build());

        register(treeBootstrap, LUSH_DELTA_AZALEA, Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG), new BendingTrunkPlacer(4, 2, 0, 3, UniformInt.of(1, 2)), new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.AZALEA_LEAVES.defaultBlockState(), 3).add(Blocks.FLOWERING_AZALEA_LEAVES.defaultBlockState(), 1)), new RandomSpreadFoliagePlacer(ConstantInt.of(3), ConstantInt.of(0), ConstantInt.of(2), 50), new TwoLayersFeatureSize(0, 0, 0)).build());
    }

    private static <FC extends FeatureConfiguration, F extends Feature<FC>> void register(BootstapContext<ConfiguredFeature<?, ?>> context, ResourceKey<ConfiguredFeature<?, ?>> key, F feature, FC config) {
        context.register(key, new ConfiguredFeature<>(feature, config));
    }

}
